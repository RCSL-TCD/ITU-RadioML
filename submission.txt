### INFO ###
The format for the submission must be a zipfile including:
 - This filled out form
 - Full source code for end-to-end reproducibility
 - Dockerfile-based environment setup
   (we suggest to base your submission on this sandbox repository)
 - Exported .onnx model with batch size = 1
 - Trained .pth checkpoint

### FILL IN ###
# Overall test accuracy reached:
-> 0.562985

# Inference cost score reached:
-> 0.146417

# Complete output dictionary printed by the inference_cost() function:
-> 
{
  "discount_sparsity": true,
  "mem_o_FLOAT32": 105888.0,
  "mem_w_SCALEDINT3": 67445.0,
  "mem_w_SCALEDINT4": 8864.0,
  "mem_w_SCALEDINT8": 2279.0,
  "op_mac_SCALEDINT6_SCALEDINT4": 299008.0,
  "op_mac_SCALEDUINT2_SCALEDINT3": 1584640.0,
  "op_mac_SCALEDUINT3_SCALEDINT3": 1401613.0,
  "op_mac_SCALEDUINT3_SCALEDINT4": 8572.0,
  "op_mac_SCALEDUINT4_SCALEDINT3": 3411968.0,
  "op_mac_SCALEDUINT4_SCALEDINT8": 2279.0,
  "total_bops": 70417957.0,
  "total_mem_o_bits": 3388416.0,
  "total_mem_w_bits": 256023.0,
  "unsupported": "set()"
}
model_cost_final.json file within the model/ directory

# Path to .onnx model within this zipfile:
-> model/

# Path to .pth checkpoint within this zipfile:
-> trainedmodel/

# Link to GitHub repository containing your code 
# (to be made public after submission deadline):
-> github.com/RCL-TCD/ITU-RadioML.git

# Instructions for reproduction:
-> On Miniconda
--> assuming docker environment setup inside "/home/user/Documents/RadioML"
--> conda activate 'environment' (conda create environment python=3.8 pip --file requirements.txt}
--> dataset_path = "/home/user/Documents/RadioML/GOLD_XYZ_OSC.0001_1024.hdf5" is the radioml dataset
--> place python file at the base folder of the environment (i.e., "/home/user/Documents/RadioML"
--> python radioml_final.py

-> On provided docker environment
--> Use the final_submission_model.ipynb
 

# Further comments:
-> Tested in miniconda docker with the requirements installed as defined for the radioml-challenge docker - Manjaro Linux w/ GPU acceleration (restrictions on installing docker)
-> Validated in Ubuntu w/o GPU acceleration using provided docker jupyter environment